package com.example.baidumap;

/*
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;
 
import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.GeoPoint;
import com.baidu.mapapi.ItemizedOverlay;
import com.baidu.mapapi.LocationListener;
import com.baidu.mapapi.MKAddrInfo;
import com.baidu.mapapi.MKDrivingRouteResult;
import com.baidu.mapapi.MKGeneralListener;
import com.baidu.mapapi.MKLocationManager;
import com.baidu.mapapi.MKOLUpdateElement;
import com.baidu.mapapi.MKOfflineMap;
import com.baidu.mapapi.MKOfflineMapListener;
import com.baidu.mapapi.MKPlanNode;
import com.baidu.mapapi.MKPoiResult;
import com.baidu.mapapi.MKSearch;
import com.baidu.mapapi.MKSearchListener;
import com.baidu.mapapi.MKTransitRouteResult;
import com.baidu.mapapi.MKWalkingRouteResult;
import com.baidu.mapapi.MKSuggestionResult;
import com.baidu.mapapi.MapActivity;
import com.baidu.mapapi.MapController;
import com.baidu.mapapi.MapView;
import com.baidu.mapapi.MyLocationOverlay;
import com.baidu.mapapi.Overlay;
import com.baidu.mapapi.OverlayItem;
import com.baidu.mapapi.PoiOverlay;
import com.baidu.mapapi.RouteOverlay;
import com.baidu.mapapi.TransitOverlay;
 
public class MyMapActivity extends MapActivity {
	BMapManager mBMapMan =null;
	MKOfflineMap mOffline=null;
	ServerSocket server=null;
	Socket socket_server=null;
	Socket socket_client=null;
	BufferedReader is;
	PrintWriter out;
	 
	double  latitude=0.0;
	double longitude=0.0;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		 try {
			//这是  192.168.1.1发给 192.168.2.2的,   另外一个应该反过来 
				 
		     
				
				ServerGetMessage ser=new ServerGetMessage(socket_server);
				Thread thread_server=new Thread(ser);
				thread_server.start();
				
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		
		mBMapMan = new BMapManager(getApplication());
		mBMapMan.init("4AA2949E616E069C37CDC3152E8C401A05A0035D", null);
		super.initMapActivity(mBMapMan);
		 
		MapView mMapView = (MapView) findViewById(R.id.bmapsView);
		mMapView.setBuiltInZoomControls(true);  //设置启用内置的缩放控件
		
		 /** 离线地图初始化  **/
        mOffline = new MKOfflineMap();
        mOffline.init(mBMapMan, new MKOfflineMapListener() {
            public void onGetOfflineMapState(int type, int state) {
                switch (type) {
	                case MKOfflineMap.TYPE_DOWNLOAD_UPDATE:
	                    {
	                        MKOLUpdateElement update = mOffline.getUpdateInfo(state);
	                        //mText.setText(String.format("%s : %d%%", update.cityName, update.ratio));
	                    }
	                    break;
	                case MKOfflineMap.TYPE_NEW_OFFLINE:
	                    Log.d("OfflineDemo", String.format("add offlinemap num:%d", state));
	                    break;
	                case MKOfflineMap.TYPE_VER_UPDATE:
	                    Log.d("OfflineDemo", String.format("new offlinemap ver"));
	                    break;
                }    
            }
        });
        /** 离线地图导入离线包 **/
        int num = mOffline.scan();
        //if (num != 0)   mText.setText(String.format("已安装%d个离线包", num));
		 
		MapController mMapController = mMapView.getController();  // 得到mMapView的控制权,可以用它控制和驱动平移和缩放
		GeoPoint point = new GeoPoint((int) (118.85052999999994 * 1E6),
		        (int) (32.02895 * 1E6));  //用给定的经纬度构造一个GeoPoint，单位是微度 (度 * 1E6)
		mMapController.setCenter(point);  //设置地图中心点
		mMapController.setZoom(17);    //设置地图zoom级别
	}
	
	
	class ClientSendMessage implements Runnable{
		InetAddress addr = InetAddress.getByName("127.0.0.1"); //像 192.168.2.2的50006端口发，192.168.2.2的50008端口在接受
		 socket_client = new Socket(addr, 8888); 
	     out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket_client.getOutputStream())),true);
	     System.out.println("客户端启动");
	     
	     public ClientSendMessage(){
	    	 
	     }
	}
	
	  //服务器类，不断的接受消息
    class ServerGetMessage implements Runnable{
    	BufferedReader in;
    	String point;
   
		
		
    	public ServerGetMessage(){
    		try {
    			server = new ServerSocket(8888);//服务器端在监听这个端口
    			System.out.println("服务器启动中...");
    			socket_server = server.accept();
    			System.out.println("开始"+socket_server);
				in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		
    	}
		public void run() {
			// TODO Auto-generated method stub
			try {
				while(true){
					point=in.readLine();
					String[] point_xy=point.split("_");
					double x=Double.valueOf(point_xy[0]);
					double y=Double.valueOf(point_xy[1]); // 现在是得到的 对方发送过来的地址地址
					//   想办法标记一下  对方  传来的  坐标 
					/*--------------------------
					 * */
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
    }
 
    
	@Override
	protected void onDestroy() {
	    if (mBMapMan != null) {
	        mBMapMan.destroy();
	        mBMapMan = null;
	    }
	    super.onDestroy();
	}
	
	@Override
	protected void onPause() {
	    if (mBMapMan != null) {
	        mBMapMan.stop();
	    }
	    super.onPause();
	}
	
	@Override
	protected void onResume() {
	    if (mBMapMan != null) {
	        mBMapMan.start();
	    }
	    super.onResume();
	}
	
	@Override
	protected boolean isRouteDisplayed() {
		return false;
	}
	
	
}